	ArrayList是List接口的可变数组的实现。实现了所有可选列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。
	 每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。
public class ArrayList<E> extends AbstractList<E>
	implements List<E>, RandomAccess, Cloneable, java.io.Serializable{}
	ArrayList继承了AbstractList，实现了List。它是一个数组队列，相当于动态数组。提供了相关的添加、删除、修改和遍历等功能。
	 ArrayList实现了RandomAccess接口，即提供了随机访问功能。RandomAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号来快速获取元素对象，这就是快速随机访问。
	ArrayList实现了Cloneable接口，即覆盖了函数clone()，能被克隆。
	ArrayList实现了java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。
	和Vector不同，ArrayList中的操作是非线程安全的。

/****************** ArrayList中的构造函数 ***************/  
// 默认构造函数 
ArrayList()

// capacity是ArrayList的默认容量大小。当由于增加数据导致容量不足时，容量会添加上一次容量大小的一半。
ArrayList(int capacity) 

// 创建一个包含collection的ArrayList  
ArrayList(Collection<? extends E> collection)


/****************** ArrayList中的API ********************/
// Collection中定义的API 
boolean             add(E object)
boolean             addAll(Collection<? extends E> collection) 
void                clear()
boolean             contains(Object object)
boolean             containsAll(Collection<?> collection)
boolean             equals(Object object)
int                 hashCode()
boolean             isEmpty()
Iterator<E>         iterator()
boolean             remove(Object object)
boolean             removeAll(Collection<?> collection)
boolean             retainAll(Collection<?> collection)
int                 size()
<T> T[]             toArray(T[] array)
Object[]            toArray()
// AbstractCollection中定义的API
void                add(int location, E object) 
boolean             addAll(int location, Collection<? extends E> collection)
E                   get(int location)
int                 indexOf(Object object)
int                 lastIndexOf(Object object)
ListIterator<E>     listIterator(int location)
ListIterator<E>     listIterator()
E                   remove(int location)
E                   set(int location, E object)
List<E>             subList(int start, int end)
// ArrayList新增的API
Object               clone() 
void                 ensureCapacity(int minimumCapacity) 
void                 trimToSize()
void                 removeRange(int fromIndex, int toIndex)

	ArrayList包含了两个重要的对象：elementData和size。
	elementData是Object[]类型的数组，它保存了添加到ArrayList中的元素。实际上，elementData是一个动态数组，我们能通过ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity。如果通过不含参数的构造函数来创建ArrayList，则elementData是一个空数组（后面会调整其大小）。elementData数组的大小会根据ArrayList容量的增长而动态的增长。
	size则是动态数组实际的大小。

ArrayList的实现：
1) 底层使用数组实现：
private transient Object[] elementData; 

2) 构造方法：
public ArrayList(){
	this(10);
}

public ArrayList(int initialCapacity){
	super();
	if(initialCapacity<0)
		throw new IllegalArgumentException("Illegal Capacity:"+initialCapacity);
	this.elementData = new Object[initialCapacity];
}

public ArrayList(Collection<? extends E> c){
	elementData = c.toArray();
	size = elementData.length;
	// c.toArray might (incorrectly) not return Object[] (see 6260652)
	if(elementData.getClass() != Object[].class)
		elementData = Arrays.copyOf(elementData,size,Object[].class);
}

3) 存储：
	 ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。

// 用指定的元素替代此列表中指定位置上的元素，并返回以前位于该位置上的元素。
public E set(int index, E element){
	RangeCheck(index);

	E oldValue = (E)elementData[index];
	elementData[index] = element;
	return oldValue;
}

// 将指定的元素添加到此列表的尾部。
public boolean add(E e){
	ensureCapacity(size+1);
	elementData[size++] = e;
	return true;
}

// 将指定的元素插入此列表中的指定位置。 
// 如果当前位置有元素，则向右移动当前位于该位置的元素以及所有后续元素（将其索引加1）。  
public void add(int index, E element){
	if(index>size || index<0)
		throw new IndexOutOfBoundsException("Index:"+index+", Size:"+size);
	// 如果数组长度不足，将进行扩容。
	ensureCapacity(size+1);
	// 将 elementData中从Index位置开始、长度为size-index的元素，  
    	// 拷贝到从下标为index+1位置开始的新的elementData数组中。  
    	// 即将当前位于该位置的元素以及所有后续元素右移一个位置。
	System.arraycopy(elementData, index, elementData, index + 1, size - index);  
   	elementData[index] = element;  
   	size++;  
}

// 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部。  
public boolean addAll(Collection<? extends E> c) {  
    Object[] a = c.toArray();  
    int numNew = a.length;  
    ensureCapacity(size + numNew);  // Increments modCount  
    System.arraycopy(a, 0, elementData, size, numNew);  
    size += numNew;  
    return numNew != 0;  
}  

// 从指定的位置开始，将指定collection中的所有元素插入到此列表中。
public boolean addAll(int index, Collection<? extends E> c) {  
    if (index > size || index < 0)  
        throw new IndexOutOfBoundsException(  
            "Index: " + index + ", Size: " + size);  
  
    Object[] a = c.toArray();  
    int numNew = a.length;  
    ensureCapacity(size + numNew);  // Increments modCount  
  
    int numMoved = size - index;  
    if (numMoved > 0)  
        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);  
  
    System.arraycopy(a, 0, elementData, index, numNew);  
    size += numNew;  
    return numNew != 0;  
}

4) 读取：
public E get(int index) {  
    RangeCheck(index);  
  
    return (E) elementData[index];  
}  

5) 删除：
	ArrayList提供了根据下标或者指定对象两种方式的删除功能.
// 移除此列表中指定位置上的元素。  
public E remove(int index) {  
    RangeCheck(index);  
  
    modCount++;  
    E oldValue = (E) elementData[index];  
  
    int numMoved = size - index - 1;  
    if (numMoved > 0)  
        System.arraycopy(elementData, index+1, elementData, index, numMoved);  
    elementData[--size] = null; // Let gc do its work  
  
    return oldValue;  
}  

// 移除此列表中首次出现的指定元素（如果存在）。这是应为ArrayList中允许存放重复的元素。  
public boolean remove(Object o) {  
    // 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。  
    if (o == null) {  
        for (int index = 0; index < size; index++)  
            if (elementData[index] == null) {  
                // 类似remove(int index)，移除列表中指定位置上的元素。  
                fastRemove(index);  
                return true;  
            }  
} else {  
    for (int index = 0; index < size; index++)  
        if (o.equals(elementData[index])) {  
            fastRemove(index);  
            return true;  
        }  
    }  
    return false;  
}

6) 调整数组容量：
public void ensureCapacity(int minCapacity) {  
    modCount++;  
    int oldCapacity = elementData.length;  
    if (minCapacity > oldCapacity) {  
        Object oldData[] = elementData;  
        int newCapacity = (oldCapacity * 3)/2 + 1;  
            if (newCapacity < minCapacity)  
                newCapacity = minCapacity;  
      // minCapacity is usually close to size, so this is a win:  
      elementData = Arrays.copyOf(elementData, newCapacity);  
    }  
}  
	数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。

	 ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。
public void trimToSize() {  
    modCount++;  
    int oldCapacity = elementData.length;  
    if (size < oldCapacity) {  
        elementData = Arrays.copyOf(elementData, size);  
    }  
} 

7) Fail-Fast机制：
	ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。

ArrayList遍历方式
1）. 通过迭代器遍历。即Iterator迭代器。
Integer value = null;  
Iterator it = list.iterator();  
while (it.hasNext()) {  
    value = (Integer)it.next();  
} 

2）. 随机访问，通过索引值去遍历。由于ArrayList实现了RandomAccess接口，所以它支持通过索引值去随机访问元素。
Integer value = null;  
int size = list.size();  
for (int i = 0; i < size; i++) {  
    value = (Integer)list.get(i);          
} 

3）. 通过for循环遍历。
Integer value = null;  
for (Integer integ : list) {  
    value = integ;  
}
	遍历ArrayList时，使用随机访问（即通过索引号访问）效率最高，而使用迭代器的效率最低。
