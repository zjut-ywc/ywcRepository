HashMap提供了三个构造函数：
	HashMap()：构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。
	HashMap(int initialCapacity)：构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。
	HashMap(int initialCapacity, float loadFactor)：构造一个带指定初始容量和加载因子的空 HashMap。
	在这里提到了两个参数：初始容量，加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中桶的数量，初始容量是创建哈希表时的容量，加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一般情况下我们是无需修改的。

HashMap底层实现还是数组，只是数组的每一项都是一条链。

三、数据结构
public HashMap(int initialCapacity,float loadFactor){
	//初始容量不能<0
	if(initialCapacity<0)
		throw new IllegalArgumentException("Illegal initial capacity:"+initialCapacity);
	//初始容量不能>最大容量值,HashMap的最大容量值为2^30
	if(initialCapacity > MAXIMUM_CAPACITY)
		initialCapacity = MAXIMUM_CAPACITY;
	//负载因子不能<0
	if(loadFactor <= 0 || Float.isNaN(loadFactor))
		throw new IllegalArgumentException("Illegal load factor:"+loadFactor);
	//计算出大于initialCapacity的最小的2的n次方值。
	int capacity = 1;
	while(capacity < initialCapacity)
		capacity <<= 1;
	this.loadFactor = loadFactor;
	//设置HashMap的容量极限，当HashMap的容量达到该极限时就会进行扩容操作
	threshold = (int)(capacity * loadFactor);
	//初始化table数组
	table = new Entry[capacity];
	init();
}

static class Entry<K,V> implements Map.Entry<K,V> {
	final K key;
	V value;
	Entry<K,V> next;
	final int hash;
	
	Entry(int h,K k,V v,Entry<K,V> n){
		value = v;
		next = n;
		key = k;
		hash = h;
	}
	.......
}

四、存储实现：put(key,vlaue)
public V put(K key, V value){
	//当key为null,调用putForNullKey方法，保存null与table第一个位置中，这是HashMap允许为null的原因
	if(key == null)		
		return putForNullKey(value);
	//计算key的hash值
	int hash = hash(key.hashCode());
	//计算key hash 值在table数组中的位置
	int i = indexFor(hash,table.length);
	//从i出开始迭代e,找到key保存的位置
	for(Entry<K,V> e = table[i];e != null;e = e.next){
		Object k;
		//判断该条链上是否有hash值相同的(key相同)
		//若存在相同,则直接覆盖value,返回旧value
		if(e.hash == hash && ((k = e.key) == key||key.equals(k))){
			V oldValue = e.value;	//旧值 = 新值
			e.value = value;
			e.recordAccess(this);
			return oldValue;	//返回旧值
		}
	}
	//修改次数增加1
	modCount++;
	//将key、value添加至i位置处
	addEntry(hash,key,value,i);
	return null;
}

	通过源码我们可以清晰看到HashMap保存数据的过程为：首先判断key是否为null，若为null，则直接调用putForNullKey方法。若不为空则先计算key的hash值，然后根据hash值搜索在table数组中的索引位置，如果table数组在该位置处有元素，则通过比较是否存在相同的key，若存在则覆盖原来key的value，否则将该元素保存在链头（最先保存的元素放在链尾）。若table在该处没有元素，则直接保存。
	1、先看迭代处。此处迭代原因就是为了防止存在相同的key值，若发现两个hash值（key）相同时，HashMap的处理方式是用新value替换旧value，这里并没有处理key，这就解释了HashMap中没有两个相同的key。
	2、在看（1）、（2）处。这里是HashMap的精华所在。首先是hash方法，该方法为一个纯粹的数学计算，就是计算h的hash值。
static int hash(int h){
	h ^= (h >>> 20) ^ (h >>> 12);
	return h ^ (h >>>7) ^ (h>>>4); 
}

	我们知道对于HashMap的table而言，数据分布需要均匀（最好每项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均与呢？我们会想到取模，但是由于取模的消耗较大，HashMap是这样处理的：调用indexFor方法。
static int indexFor(int h,int length){
	return h&(length-1);
}

	HashMap的底层数组长度总是2的n次方，在构造函数中存在：capacity <<= 1;这样做总是能够保证HashMap的底层数组长度为2的n次方。当length为2的n次方时，h&(length - 1)就相当于对length取模，而且速度比直接取模快得多，这是HashMap在速度上的一个优化。
	我们回到indexFor方法，该方法仅有一条语句：h&(length - 1)，这句话除了上面的取模运算外还有一个非常重要的责任：均匀分布table数据和充分利用空间。
	当length = 2^n时，不同的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布较均匀，查询速度也较快。

 	一是链的产生。这是一个非常优雅的设计。系统总是将新的Entry对象添加到bucketIndex处。如果bucketIndex处已经有了对象，那么新添加的Entry对象将指向原有的Entry对象，形成一条Entry链，但是若bucketIndex处没有Entry对象，也就是e==null,那么新添加的Entry对象指向null，也就不会产生Entry链了。
	 二扩容问题。随着HashMap中元素的数量越来越多，发生碰撞的概率就越来越大，所产生的链表长度就会越来越长，这样势必会影响HashMap的速度，为了保证HashMap的效率，系统必须要在某个临界点进行扩容处理。该临界点在当HashMap中元素的数量等于table数组长度*加载因子。但是扩容是一个非常耗时的过程，因为它需要重新计算这些数据在新table数组中的位置并进行复制处理。所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。
void addEntry(int hash,K key,V value,int bucketIndex){
	//获取bucketIndex处的Entry
	Entry<K,V> e = table[bucketIndex];
	//将新创建的Entry放入bucketIndex索引处，并让新的Entry指向原来的Entry
	table[bucketIndex] = new Entry<K,V>(hash,key,value,e);
	//若HashMap中元素的个数超过极限了,则容量扩大两倍
	if(size++ >= threshold)
		resize(2*table.length);
}

五、读取实现：get(key)
public V get(Object key){
	//若为null,调用getForNullKey方法返回相对应的value
	if(key == null)
		return getForNullKey();
	//根据该key的hashCode值计算它的hash码
	int hash = hash(key.hashCode());
	//取出table数组中指定索引处的值
	for(Entry<K,V> e = table[indexFor(hash,table.length)];e != null;e = e.next){
		Object k;
		if(e.hash == hash && ((k = e.key) == key.equals(k)))
			return e.value;
	}
	return null;
}
	在这里能够根据key快速的取到value除了和HashMap的数据结构密不可分外，还和Entry有莫大的关系，在前面就提到过，HashMap在存储过程中并没有将key，value分开来存储，而是当做一个整体key-value来处理的，这个整体就是Entry对象。同时value也只相当于key的附属而已。在存储的过程中，系统根据key的hashcode来决定Entry在table数组中的存储位置，在取的过程中同样根据key的hashcode取出相对应的Entry对象。